Link: https://comandosgit.github.io/
A1º passo: git config (definir o seu nome de usuário e endereço de e-mail. Isso é importante porque todos os commits no Git utilizam essas informações, e está imutavelmente anexado nos commits que você realiza:)
           (git config --global user.name "Everton Heleno" - git config --global user.email Everton-hel@hotmail.com)
A2º passo: git help (existem três maneiras de obter a ajuda para qualquer um dos comandos Git:git help {comando} - git {comando} --help man git- {comando})

00° passo: Iniciar o Git Bash na pasta do projeto ou entrar na pasta via comando CMD do prompt ou no VS
01° passo: git status (Esse comando esclarece quais arquivos foram alterados e faz uma comparação com relação à ramificação principal.)
02º passo: git diff (mostra as linhas exatas que foram adicionadas e removidas)
03° passo: git init (é o primeiro dos comandos git que se usa para começar um repositório. Transformar uma pasta com códigos no seu HD em uma pasta monitorada pelo git)
04° passo: git add . (“git add nome_do_arquivo”  ou “git add .” - Comando que inclui as novas ações para serem monitoradas, uniario ou todos.)
05° passo: git commit -a -m "coment" ("git commit nome_do_arquiv -m "mensagem"" - "git commit nome_do_arquiv -a" Ele leva as mudanças de um ambiente local para o repositório no git, podendo também por uma mensagem)
06° passo: git branch -M main (cria novas branches. Mas também pode funcionar como uma forma de verificar as ramificações já existentes. )
07° passo: git remote add origin https://github.com/Everton-Hel/Teste1_Git_HUB.git (cria coneção com git X a pasta do github)
08° passo: git push -u origin main (envia as atualizações para o github)
09° passo: git pull (puchar as atualizações do github, caso não tenha irá informar)
10° passo: git clone https://github.com/Everton-Hel/Teste1_Git_HUB.git (baixa uma nova copia total do projeot, se por o ponto no final, joga tudo na raiz do local, sem o ponto recria a pasta total)
11° passo: git rm TestteTesttePULL.xml (Ira remover o arquivo)
12° passo: git log (tras todo os log's criados)
13° passo: GIT CHECKOUT "ARQUIVO" (TRAZ O ARQUIVO ORIGINAL DO gIThUB)
14° passo: .gitignore (criar um arquivo chamado ".gitignore" nele por "arquivo que dever ser
    ignorado ou ignorar a pasta toda, exemplo"noe_modules/*" irá ignorar a pasta toda)
15° passo: git reset --hard origin/main (ira resetar toda a branch do git, trazendo a main 
    do github para o git, assim irá perder tudo, deixando o original da main)
16° passo: git mv "arquivo.css NovaPasta/arquivo.css" (irá mover o arquivo de um local para outro
           ou pode renomentar, exemplo "git mv pasta/arquivo.css pasta/NovoNome_arquivo.css")
17° passo: git branches (criando branches)





Manual do Markdown para GitHub

Na pratica
========================== envia as atualizações ======================
git init
git add README.md | git add .
git commit -a -m "first commit"
git branch -M main
git remote add origin https://github.com/Everton-Hel/Teste1_Git_HUB.git
git push -u origin main | git push

======================== pucha as atualizações =========================
git pull

